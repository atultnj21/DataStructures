• Sorting Algorithms •
• ------------------ •
  •  Bubble sort
  •  Selection sort
  •  Insertion sort
  •  Merge Sort
  •  Quick Sort
  •  Counting Sort
  •  Bucket Sort

• Bubble sort

   Best case scenario
   Passes O(1)
   comparisons O(n)
   total : O(n) Liner

   Worst case scenario
   Passes O(n)
   comparisons O(n)
   total : O(n^2)

• Selection Sort

   Best case scenario
   Passes O(n)
   comparisons O(n)
   total : O(n^2) Quadratic

   Worst case scenario
   Passes O(n)
   comparisons O(n)
   total : O(n^2) Quadratic

   selecting the minimum element

• Insertion Sort

   Best case scenario
   iterations O(n)
   shift items O(1)
   total : O(n) Linear

   Worst case scenario
   iterations O(n)
   shift items O(n)
   total : O(n^2) Quadratic

• Merge Sort (DIVIDE AND CONQUER ALGORITHM)

  The idea of merge sort is to break down the list
  into smaller and smaller sublist sort those and
  merge them back to a complete sorted list we Start
  of by dividing the array into half we can find the
  middle element by dividing the length of the array
  by 2 . we are allocating additional space for this
  algorithm to run We Will Keep On dividing the  list
  into the sublist until we get the sublist having one
  element only after that we will merge the sublist
  and we will keep on merging the sublist to produce
  a new sorted list

               BEST          WORST

   Dividing    O(log n)      O(log n)
   Merging     O(n)          O(n)

     total    O(n log n)    O(n log n)
     space    O(n)          O(n)

• QuickSort
    implemented by selecting first element as pivot


• Counting Sort

    All the Sorting algorithms we have explored so far are
    comparison based sorting algorithm.
    we have some other bunch of algorithms that don't use
    comparisons
    • Counting Sort
    • Bucket Sort
    • Radix Sort

    Counting sort is a sorting algorithm that sorts the elements
    of an array by counting the number of occurrences of each
    unique element in the array. The count is stored in an auxiliary
    array and the sorting is done by mapping the count as an index
    of the auxiliary array

    • Working of Counting Sort
     1. Find out the maximum element (let it be max) from the given array.

     2. Initialize an array of length max+1 with all elements 0. This array
        is used for storing the count of the elements in the array.

     3. Store the count of each element at their respective index in
        count array
        For example: if the count of element 3 is 2 then, 2 is stored
        in the 3rd position of count array. If element "5" is not present
        in the array, then 0 is stored in 5th position.

      4. Repopulate Input array according to counts .

    • Space : O(K)      for counts array
      where k is the max element in the array

    • Time :
         Populate counts array  :  O(n)  as this requires
                                         iterating over the
                                         input array

         Iterate counts to refill
         input array    :           O(K)

         Total                      O(n+K)    -> linear

         this comes with a cost i.e  TIME-MEMORY TRADE-OFF

    • WHEN TO USE
       • when allocating extra space is not an issue.
       • All values are positive integers.
       • Most of the values in the range are present.


