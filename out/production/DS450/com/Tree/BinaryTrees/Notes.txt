TREES
• Represent hierarchical data
• Databases
• Autocompletion
• compilers
• compression

• NON - LINEAR DATA STRUCTURES
  • Binary Trees
  • AVL Trees
  • Heaps
  • Tries
  • Graphs

  N nodes
  n-1 edges/links

             1             level 0       Root
          /     \                        Children(Left-Right)
       2          3        level 1       Parent
    /  |  \     /    \                   sibling
  4    5   6   7      8    level 2       leaf: has no child
      / \      |                         1 is the ancestor of 2
     9   10    11                        2 is the descendant of 1


A tree is a data structure that stores elements in a hierarchy
we refer to these elements as nodes and the lines that connect them
as edges .
The top node of the tree is called the ROOT node
1 is the Parent of 2  and 3
2 and 3 are siblings and are descendant of 1
4,9,10,6,11,8 are leaf nodes

DEPTH(of x): Number of edges in the path from root to x
ex depth of 5 is 2.

HEIGHT(of x): Number of edges in the longest  path form x to a leaf
ex : height of 2 is  2, height of 3 is 2

• height of leaf node is 0
• height of tree = height of root node

• degree of node is number of children of that node
• degree of tree : max degree among all nodes

• level of node -> level = depth
level of tree = height of tree

BINARY TREE
A binary tree is a tree data structure in which each node
has at most two children
i.e : Max node possible at any level is 2.
              ()
             /  \
            ()  ()
           /  \   \
          ()   ()  ()

FULL BINARY TREE
each node can have 0 or 2 children

COMPLETE BINARY TREE
all levels except possibly last are completely filled
and all nodes are as left as possible (last level)

               ()
             /    \
            ()     ()
           /  \    /
         ()   ()  ()

PERFECT BINARY TREE
all INTERNAL nodes have 2 children and all leaf nodes
are at same level

               ()
             /    \
            ()     ()
           /  \   /   \
         ()   () ()    ()

BINARY SEARCH TREE

          7
        /   \
      4       9
    /   \    /  \
   1     6  8    10

It is a special type of BINARY TREE , it allows us to quickly
look for data .
special condition:
left child < node < right child
unlike Arrays or LinkedList we don't have to traverse this whole
tree to find a value.

Let's Say we are looking for 1 we start with the root node
is 1 smaller or larger than the value of root node? it's smaller!
So we look at the left sub-tree we don't care about the right
sub-tree because we know all these nodes are greater than 7
we are narrowing down our search .
this tree has 7 nodes but we found our target node with
only 3 comparisons , Because in every step we threw half of
our nodes away this is what we call LOGARITHMIC TIME COMPLEXITY

LOOKUP : O(log n)
INSERT : O(log n)
DELETE : O(log n)

https://visualgo.net/en/bst

Q) Add the following numbers to a binary search tree. Remember,
in a binary search tree:
left < parent
right > parent
[10, 5, 15, 6, 1, 8, 12, 18, 17]

                   10
                /      \
              5          15
           /   \        /   \
         1       6     12    18
                   \        /
                     8    17

ARRAY REPRESENTATION OF BINARY TREE
• it should be a complete binary tree

case:  if node is at the ith index
leftChild = (2*i)+1
Right child = (2*i)+2
parent = i-1/2

             (A)
          /       \
        (B)        (C)
       /   \      /   \
     (D)    (E) (F)    (G)
    /   \
  (H)     (I)

 0 1 2 3 4 5 6 7 8
[A B C D E F G H I ]

Right child of B
 [(2*1)+2] = 4
 4 -> E
Left child of  B
 [(2*1)+1]=3
 3 -> D
Parent of B
 |(1-1)/2| = 0
 0 -> A

• TRAVERSAL
In LINEAR DATA STRUCTURES  like ARRAYS and LINKED LISTS we
only have one way of traversal  we start at the first node
and go forward until we reach the end .
but TREES are NON LINEAR DATA STRUCTURES so if we start traversing
from the root node , we have possible directions.

• We have two different approaches for Tree Traversal
• BREADTH FIRST
   In breadth first traversal also called LEVEL ORDER
   traversal we visit all the nodes at the same level
   before visiting a node at the next level

                 (7)
              /       \
            (4)        (9)
          /    \      /    \
        (1)    (6)  (8)     (10)

        visiting order:
        7,4,9,1,6,8,10

• DEPTH FIRST
  • PRE-ORDER     ROOT,left,right

                 (7)
              /       \
            (4)        (9)
          /    \      /    \
        (1)    (6)  (8)     (10)

         visiting order:
         7,4,1,6,9,8,10

  • IN-ORDER      left,ROOT,right

                   (7)
                /       \
              (4)        (9)
            /    \      /    \
          (1)    (6)  (8)     (10)

           visiting order:
           1,4,6,7,8,9,10
  • what if we want these numbers to come in descending order?
  we simply swap the order right,ROOT,left.

  • POST-ORDER    left,right,ROOT

                   (7)
                /       \
              (4)        (9)
            /    \      /    \
          (1)    (6)  (8)     (10)

           visiting order:
           1,6,4,8,10,9,7
  • from leaf to root

Q)Traverse this following tree using all the traversal algorithms
  Write down the order in which nodes will get
  visited.

                (20)
              /      \
           (10)       (30)
          /   \       /
        (6)   (14)  (24)
       /   \            \
      (3)   (8)          (26)

•BREADTH-FIRST
     visiting order: 20,10,30,6,14,24,3,8,26
•DEPTH-FIRST
  • PRE-ORDER
     visiting order: 20,10,6,3,8,14,30,24,26
  • IN-ORDER
     visiting order: 3,6,8,10,14,20,24,26,30
  • POST-ORDER
     visiting order: 3,8,6,14,10,26,24,30,20
