• AVL Trees •
•-----------•

Searching in a binary search tree is a o(log n) operation
If a binary search tree is not structured properly
the performance is gonna drop to o(n), to solve this
AVL trees come into picture

• Balanced & Unbalanced Tree
    • Balanced
        In a balanced tree
        height(left)-height(right) < = 1

        ex:-
              ()             ()
             /  \          /    \
           ()    ()      ()      ()
          /  \          /  \    /  \
        ()    ()       ()   () ()   ()
                        perfect tree
    • Unbalanced
       ex:
       ()                                ()
         \                              /
          ()                          ()
            \                        /
             ()                    ()
               \                  /
                ()              ()
       Right skewed              left skewed
                  worst type of BST

Q) How Trees become Unbalanced?
7,10,15,20,25
       (7)
         \
          (10)
            \
             (15)
               \
                (20)
                  \
                  (25)

• SELF - BALANCING TREES
    • AVL Trees(Adelson - Velsky and Landis)
    • Red - Black Trees
    • B - Trees
    • Splay Trees
    • 2-3 Trees

• AVL Trees
    AVL Trees are special type of binary Search trees
    that Automatically re-balances themselves everytime
    we remove or add new Nodes.
    They do this by ensuring height(left)-height(right)<=1
    if the difference id more the re-balance themselves
    using Rotations.

• Rotations
    • Left(LL)
    • Right(RR)
    • Left-Right(LR)
    • Right-Left(RL)

• Left Rotation

   0(1)2    -> imbalanced here
      \
      0(2)1  -> height
         \
         0(3)0
   imagine we put a weight on top of the 1
   it gets heavy and drops

          (2)
        /     \        <- Balanced
      (1)      (3)
   height of one side increases by 1
   height of other side is decreases by 1
   this is how trees get balanced.

• Right Rotation
      imbalanced <-    2(3)0
                       /
                   1(2)0
                    /
                0(1)0
      imagine we put a weight on top of the 3
      it gets heavy and drops
               (2)
             /     \        <- Balanced
           (1)      (3)

• Left-Right Rotation(Double Rotation)
     sometimes we cannot re-balance a tree using a left or a
     right rotation ,we need to combine these rotations.

          (10)                (10)
          /  l                /               (7)
       (5)         ->       (7)   ->        /     \
          \  r              /            (5)       (10)
           (7)            (5)

• Right-Left Rotation(Double Rotation)

         (5)             (5)
            \ r            \                  (7)
             (10)   ->      (7)   ->        /     \
            / l               \           (5)      (10)
         (7)                   (10)

• Populating an AVL Tree •

    Q)construct a AVL Tree by inserting the following data
    30,15,18,10,16,7,8

      2(30)0             (30)
       /                 /
    0(15)1     ->      (18)       ->       (18)
       \                /                 /   \
      0(18)0          (15)              (15)  (30)

    imbalance is due    R-rotation
    to left child
    right subtree
    L-R rotation
    rotate 15 to the
    left ,15 drops
    18 goes up.

       2(18)1              2(18)1                 3(18)1
        /   \               /  \                  /    \
     1(15)0 0(30)0  ->   1(15)1 0(30)0   ->    2(15)1 0(30)0
      /                   /  \                  /   \
   0(10)0              0(10)0 0(16)0         1(10)0 0(16)0
                                              /
                                           0(7)0
   Balanced            Still Balanced        Unbalanced

                           imbalance is in the left child
                           left subtree so we will do a
                           right rotation ,but however when
                           we rotate 18 to the right 15 is
                           gonna go up and 18 is gonna come
                           down and become the right child
                           of 15 before we perform the rotation
                           we should temporarily disconnect 16
                           from 15.


        (15)                    (15)
       /   \                   /    \
    (10)   (18)      ->    2(10)0    1(18)1
    /      /   \            /       /    \
   (7)  (16)   (30)      0(7)1   0(16)0 0(30)0
                            \
                           0(8)0

                          imbalance in left child
                          right subtree (L-R rotation)

             (15)                           (15)
            /    \                         /     \
        2(10)0    1(18)1       ->        (8)      (18)
         /       /    \                 /  \      /   \
      1(8)0   0(16)0 0(30)0           (7)  (10) (16)  (30)
       /
    0(7)0

    (Right Rotation)

Q)construct a AVL Tree by inserting the following data
    14,17,11,7,53,4,13,12,8,60,19,16,20

            (14)                              (14)
          /      \                           /    \
      2(11)0      0(17)1   ->              (7)     (17)
       /            \                     /  \        \
    1(7)0           0(53)0              (4)   (11)     (53)
     /
  0(4)0

   imbalance in left child
   left subtree
   (Right-Rotation)


              3(14)2                    (14)
              /    \                    /  \
           1(7)2   0(17)1     ->      (7)   (17)
           /  \        \             /  \      \
        0(4)0 0(11)1   0(53)0     0(4)0 0(11)2 0(53)0
                 \                         \
                0(13)0                     1(13)0
                                            /
                                         0(12)0
        Balanced                  imbalance in right child
                                  left sub-tree
                                  (Right-left Rotation)

             (14)                       (14)
             /  \                      /    \
           (7)   (17)                (7)     (17)
          /  \      \               /  \        \
       0(4)0 0(11)2 0(53)0   ->   (4)   (12)    (53)
                \                      /   \
                0(12)1               (11)   (13)
                   \
                  0(13)0             Balanced

                (14)                      (14)
               /    \                   /     \
            1(7)3    (17)   ->        (7)      (17)
            /  \        \            /    \      \
         (4)  2(12)1   (53)        (4)    (11)    (53)
               /   \                     /    \
            (11)   (13)               (8)      (12)
            /                                    \
          (8)                                    (13)

         imbalance in right child
         left subtree
         Right-Left Rotation

              (14)                        (14)
            /      \                      /  \
          (11)      (17)      ->        (11) 0(17)2
          /   \        \               /   \    \
       (7)     (12)     (53)         (7)   (12)  (53)
      /    \      \                  / \     \     \
    (4)    (8)    (13)             (4)  (8)   (13)  (60)
    Balanced                        imbalance in right-child
                                    right subtree  (left-Rotation)

          (14)                              (14)
          /  \                           /        \
        (11) 0(17)2                    (11)       (53)
       /   \    \         ->           /  \       /  \
     (7)   (12)  (53)                (7)  (12)  (17)  (60)
     / \     \     \                 / \     \
   (4)  (8)   (13)  (60)           (4) (8)   (13)

                 (14)
            /           \
          (11)           (53)
          /  \           /  \
        (7)  (12)      (17)  (60)
        / \     \      /   \
      (4) (8)   (13) (16)  (19)
      Balanced

              (14)
         /           \
       (11)          3(53)1
       /  \           /  \
     (7)  (12)      (17)  (60)
     / \     \      /   \
   (4) (8)   (13) (16)  (19)
                           \
                           (20)
   imbalance in the left-child
   Right subtree
   (left-right rotation)

              (14)
         /           \
       (11)          3(53)1
       /  \           /  \
     (7)  (12)      (19)  (60)
     / \     \      /   \
   (4) (8)   (13) (17)  (20)
                   /
                 (16)

              (14)
         /           \
       (11)          3(19)1
       /  \           /  \
     (7)  (12)      (17)  (53)
     / \     \      /     /   \
   (4) (8)   (13) (16)  (20)  (60)

https://www.cs.usfca.edu/~galles/visualization/AVLtree.html