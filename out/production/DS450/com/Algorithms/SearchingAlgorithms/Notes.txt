• Searching Algorithms •
•----------------------•

   • Linear Search
   • Binary Search
   • Ternary Search
   • Jump Search
   • Exponential Search

• Linear Search
    Linear search is the simplest search algorithm . we iterate
    over a list inspect each item, if we find it we return its
    index otherwise we return -1 , meaning the item doesn't exist
    in the list .

                       Best         Worst
    Time Complexity    O(1)         O(n)

• Binary Search (Divide and Conquer Algorithm)
    Binary Search is faster than Linear Search but it only works on
    Sorted Lists , so if our input is not sorted we should either
    sort it first and then use binary search , or we have to use
    linear search depending upon the total cost.

     0 1 2 3  4 5  6  7  8  9
    [3,5,6,9,11,18,20,21,24,30]

    Let's say we are looking for 6 in this list
    first we look at the middle item

    middle = (left+right)/2
           = (0+9)/2  => 4

    we have 11 in the middle the value we are looking for is 6
    since our list is sorted and 6 is smaller than 11, so we know
    if we have a 6, it will be on the left side .

    Binary search is faster than linear search because in each step
    we cut down the array by half .

     0 1 2 3
    [3,5,6,9]
    now we repeat same steps with the partition on the left side of 11

    middle = (0+3)/2 => 1

    we have 5 in the middle the value we are looking for is 6
    since our list is sorted and 6 is larger than 5, so we know
    if we have a 6, it will be on the right side .

     2 3
    [6,9]
    now we repeat same steps with the partition on the right side of 5.

    middle = (2+3)/2 => 2
    we have found 6 in the middle.

    It took us 3 iterations even though we have 10 elements

    Time Complexity : O(log n)
    Space Complexity : O(log n) in Recursive
                       O(1)     in Iterative

• Ternary Search
    In ternary search instead of dividing the array into half at
    every step we divide it into three parts here we have two middle
    points mid1 and mid2

     0  1   2  3   4   5   6   7   8   9
    [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]
              m1          m2

    partitionSize = (right - left/3)
    mid1= left + partitionSize
    mid2 = right - partitionSize

    time complexity log3n  (log base 3 of n)

    2^x=8            x=3
    log28 =3        (log base 2 of 8 equals 3)
    Logarithm tells us to which power should we raise a number
    to get some other number .

    log38=1.89

    binarySearch                 TernarySearch

    log2n                        log3n

    3 comparisons only           target > mid2
    target == mid                target == mid2
    target > mid                 target < mid2 && target > mid1
    target < mid                 target == mid1
                                 target < mid1
                                 5 comparisons

    BinarySearch is faster than ternary search .

• Jump Search
    It is an improvement to Linear Search but it is not
    as fast as binarySearch.
    In jump search we divide the list into a few blocks
    and instead of checking every item we jump to the
    block where the target item may exist and perform
    linear search only in that block .

    blockSize = √n   (sqrt(n))

         0  1   2  3   4   5   6   7   8   9
        [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]

        blockSize=3
        so we can divide this array into 4 blocks

         0  1   2      3   4   5        6   7   8         9
        [3 ,5 , 6,     9, 11, 18,      20, 21, 24,       30]

        Instead of checking every single item in this array
        we're gonna figure out in which block the target item
        exists.

        let's say we are looking for 23 we start from the first
        block we compare the last item in this block with our target
        value 6<23 so our target value will not be in this block
        we perform this operation on other blocks to find our block

        Time complexity : O(√n\

• Exponential Search
    In exponential search we start from a small range and see if the
    target item is in that range or not then we double the range in
    each step, once we find the range where the target item might exist
    in , we'll do a binary search in that range .

         0  1   2  3   4   5   6   7   8   9
        [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]

        target = 19
        b = bound = 1

         0  1   2  3   4   5   6   7   8   9
        [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]
            b
            5<19 , so if 19 exists it'll definitely be after 5
            so we will expand our range

         0  1   2  3   4   5   6   7   8   9
        [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]
                b
                6<19

         0  1   2  3   4   5   6   7   8   9
        [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]
                       b
                       11<19

         0  1   2  3   4   5   6   7   8   9
        [3 ,5 , 6, 9, 11, 18, 20, 21, 24, 30]
                      ub               b
                                       24<19 No
                                       perform binary search
    Time Complexity : O(log i)